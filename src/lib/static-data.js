export const testSourceMap = {
	version: 3,
	names: [],
	sources: ['repro.svelte'],
	sourcesContent: [
		'<script>\n  export let users;\n\n  if (users.length > 0) {\n    console.log("repro.svelte::users more than 0!");\n  } else {\n    console.log("repro.svelte::users less than 0!");\n  }\n</script>\n\n<ul>\n  {#each users as user}\n    <li>{user}</li>\n  {/each}\n\n  {#if users.length === 0}\n    <p>No users available</p>\n  {/if}\n</ul>\n'
	],
	mappings:
		';;;;;;;;;;;;;;;;;;;;;;;;;wBAYS,GAAI;;;;;;;;;GAAT,MAAe;;;;;wCAAV,GAAI;;;;;;;;;;;;;;;;;;;;;GAIT,MAAyB;;;;;;;;;;;4BALpB,GAAK;;;gCAAV,MAAI;;;;0BAID,GAAK,IAAC,MAAM,KAAK,CAAC;;;;;;;;;;;;;;GALzB,MAQK;;;;;;;;;;;2BAPI,GAAK;;;+BAAV,MAAI;;;;;;;;;;;;;;;;oCAAJ,MAAI;;;iBAID,GAAK,IAAC,MAAM,KAAK,CAAC;;;;;;;;;;;;;;;;;;;;;;;;OAdZ,KAAK;;KAEZ,KAAK,CAAC,MAAM,GAAG,CAAC;EAClB,OAAO,CAAC,GAAG,CAAC,kCAAkC;;EAE9C,OAAO,CAAC,GAAG,CAAC,kCAAkC;;;;;;;;;;;;;;;;;'
};

export const testGenerated = `/* repro.svelte generated by Svelte v3.55.1 */
import {
 SvelteComponent,
 append,
 destroy_each,
 detach,
 element,
 init,
 insert,
 noop,
 safe_not_equal,
 set_data,
 space,
 text
} from "svelte/internal";

function get_each_context(ctx, list, i) {
 const child_ctx = ctx.slice();
 child_ctx[1] = list[i];
 return child_ctx;
}

// (12:2) {#each users as user}
function create_each_block(ctx) {
 let li;
 let t_value = /*user*/ ctx[1] + "";
 let t;

 return {
  c() {
   li = element("li");
   t = text(t_value);
  },
  m(target, anchor) {
   insert(target, li, anchor);
   append(li, t);
  },
  p(ctx, dirty) {
   if (dirty & /*users*/ 1) {
    if (t_value !== (t_value = /*user*/ ctx[1] + "")) {
     set_data(t, t_value);
    }
   }
  },
  d(detaching) {
   if (detaching) detach(li);
  }
 };
}

// (16:2) {#if users.length === 0}
function create_if_block(ctx) {
 let p;

 return {
  c() {
   p = element("p");
   p.textContent = "No users available";
  },
  m(target, anchor) {
   insert(target, p, anchor);
  },
  d(detaching) {
   if (detaching) detach(p);
  }
 };
}

function create_fragment(ctx) {
 let ul;
 let t;
 let each_value = /*users*/ ctx[0];
 let each_blocks = [];

 for (let i = 0; i < each_value.length; i += 1) {
  each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
 }

 let if_block = /*users*/ ctx[0].length === 0 && create_if_block(ctx);

 return {
  c() {
   ul = element("ul");

   for (let i = 0; i < each_blocks.length; i += 1) {
    each_blocks[i].c();
   }

   t = space();
   if (if_block) if_block.c();
  },
  m(target, anchor) {
   insert(target, ul, anchor);

   for (let i = 0; i < each_blocks.length; i += 1) {
    each_blocks[i].m(ul, null);
   }

   append(ul, t);
   if (if_block) if_block.m(ul, null);
  },
  p(ctx, [dirty]) {
   if (dirty & /*users*/ 1) {
    each_value = /*users*/ ctx[0];
    let i;

    for (i = 0; i < each_value.length; i += 1) {
     const child_ctx = get_each_context(ctx, each_value, i);

     if (each_blocks[i]) {
      each_blocks[i].p(child_ctx, dirty);
     } else {
      each_blocks[i] = create_each_block(child_ctx);
      each_blocks[i].c();
      each_blocks[i].m(ul, t);
     }
    }

    for (; i < each_blocks.length; i += 1) {
     each_blocks[i].d(1);
    }

    each_blocks.length = each_value.length;
   }

   if (/*users*/ ctx[0].length === 0) {
    if (if_block) {

    } else {
     if_block = create_if_block(ctx);
     if_block.c();
     if_block.m(ul, null);
    }
   } else if (if_block) {
    if_block.d(1);
    if_block = null;
   }
  },
  i: noop,
  o: noop,
  d(detaching) {
   if (detaching) detach(ul);
   destroy_each(each_blocks, detaching);
   if (if_block) if_block.d();
  }
 };
}

function instance($$self, $$props, $$invalidate) {
 let { users } = $$props;

 if (users.length > 0) {
  console.log("repro.svelte::users more than 0!");
 } else {
  console.log("repro.svelte::users less than 0!");
 }

 $$self.$$set = $$props => {
  if ('users' in $$props) $$invalidate(0, users = $$props.users);
 };

 return [users];
}

class Repro extends SvelteComponent {
 constructor(options) {
  super();
  init(this, options, instance, create_fragment, safe_not_equal, { users: 0 });
 }
}

export default Repro;`;
